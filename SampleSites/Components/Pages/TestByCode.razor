@page "/test/bycode"
@implements IAsyncDisposable
@inject HotKeys HotKeys

<h1>Test by Code</h1>

<p>This page distinguish between left and right modifier keys.</p>

<EnteredKeyList @ref="_enteredKeyList" />

@code {
    private EnteredKeyList? _enteredKeyList;

    private HotKeysContext? _hotKeysContext;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _hotKeysContext = this.HotKeys.CreateContext()
                .Add(Code.Escape, () => _enteredKeyList?.Clear())
                .Add(Code.A, OnHotKey)
                .Add(Code.B, OnHotKey)

                // ShiftLeft/Right
                .Add(Code.ShiftLeft, OnHotKey)
                .Add(Code.ShiftRight, OnHotKey)
                .Add(ModCode.Ctrl, Code.ShiftLeft, OnHotKey)
                .Add(ModCode.Ctrl | ModCode.Alt, Code.ShiftRight, OnHotKey)

                // ControlLeft/Right
                .Add(Code.ControlLeft, OnHotKey)
                .Add(Code.ControlRight, OnHotKey)
                .Add(ModCode.Shift | ModCode.Alt, Code.ControlLeft, OnHotKey)
                .Add(ModCode.Shift, Code.ControlRight, OnHotKey)

                // AltLeft/Right
                .Add(Code.AltLeft, OnHotKey)
                .Add(Code.AltRight, OnHotKey)
                .Add(ModCode.Ctrl, Code.AltLeft, OnHotKey)
                .Add(ModCode.Ctrl | ModCode.Shift, Code.AltRight, OnHotKey)

                // MetaLeft/Right
                .Add(Code.MetaLeft, OnHotKey)
                .Add(Code.MetaRight, OnHotKey)
                .Add(ModCode.Alt, Code.MetaLeft, OnHotKey)
                .Add(ModCode.Alt | ModCode.Shift, Code.MetaRight, OnHotKey);
        }
    }

    private void OnHotKey(HotKeyEntryByCode hotKeyEntry)
    {
        _enteredKeyList?.OnEnteredKey(hotKeyEntry, appendLast: true);
    }

    public async ValueTask DisposeAsync()
    {
        if (this._hotKeysContext is not null) await this._hotKeysContext.DisposeAsync();
    }
}